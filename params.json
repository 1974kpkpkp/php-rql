{"name":"PHP-RQL","tagline":"A PHP client driver for the RethinkDB query language (ReQL).","body":"PHP-RQL\r\n=======\r\n\r\nPHP-RQL provides a driver to access [RethinkDB](http://rethinkdb.com) databases from PHP code.\r\nIt is licensed under the terms of the [Apache License 2.0](http://www.apache.org/licenses/LICENSE-2.0).\r\n\r\nDocumentation is available in our Wiki: http://php-rql.dnsalias.net/wiki/\r\n\r\nUpdates\r\n-------\r\n\r\n* 06/14/2013 New release: PHP-RQL 1.6.1. Adds support for a filter argument to count() that was missing in 1.6.0 ([examples](http://php-rql.dnsalias.net/api/#ph:aggregation-count)).\r\n* 06/13/2013 New release: PHP-RQL 1.6.0. Support for the RethinkDB 1.6 wire protocol and its [new features](https://github.com/rethinkdb/rethinkdb/blob/v1.6.x/NOTES). This release also features the new [PHP Protobuf](https://github.com/allegro/php-protobuf) backend for dramatically increased client performance. Please read the [installation guide](http://php-rql.dnsalias.net/wiki/index.php/InstallExtension) for learning how to set up the new backend.\r\n* 05/29/2013 **Announcement:** The upcoming version of PHP-RQL will come with support for a new protocol buffer backend, [PHP Protobuf](https://github.com/allegro/php-protobuf). PHP Protobuf was recently released as open source by the Allegro Group. It uses a compiled PHP extension. Using PHP Protobuf instead of the current backend (which is based on [pb4php](http://code.google.com/p/pb4php/) ) allows for drastic improvements in the driver's efficiency and performance. If you are interested in testing this version, you can install from the [php_protobuf](https://github.com/danielmewes/php-rql/tree/php_protobuf) branch ([ZIP archive](https://github.com/danielmewes/php-rql/archive/php_protobuf.zip) ). Then install the protobuf extension as explained on [this wiki page](http://php-rql.dnsalias.net/wiki/index.php/InstallExtension). The old backend will still be supported, and offer an alternative for cases where installing a PHP extension is not possible or not worth the hassle.\r\n\r\nRequirements\r\n------------\r\n\r\n* PHP 5.3\r\n* RethinkDB 1.6\r\n\r\nInstalling\r\n----------\r\n* Use [Composer](http://getcomposer.org):\r\n  ```require: \"danielmewes/php-rql\": \"dev-master\"```\r\n* Install manually:\r\n  1. Download the ZIP file of this repository or clone it using git.\r\n  2. Unpack it.\r\n  3. Copy the contents of the src directory (folders pb4php and rdb) into the path of your PHP project, or your system's PHP path (e.g. /usr/share/php).\r\n\r\nAfter installing the driver, we recommend that you also install the [PHP Protobuf extension](http://php-rql.dnsalias.net/wiki/index.php/InstallExtension) for improved performance.\r\n\r\nExample\r\n-------\r\n\r\n```php\r\n<?php\r\n    // Load the driver\r\n    require_once(\"rdb/rdb.php\");\r\n\r\n    // Connect to localhost\r\n    $conn = r\\connect('localhost');\r\n\r\n    // Create a test table\r\n    r\\db(\"test\")->tableCreate(\"tablePhpTest\")->run($conn);\r\n\r\n    // Insert a document\r\n    $document = array('someKey' => 'someValue');\r\n    $result = r\\table(\"tablePhpTest\")->insert($document)\r\n        ->run($conn);\r\n    echo \"Insert: $result\\n\";\r\n\r\n    // How many documents are in the table?\r\n    $result = r\\table(\"tablePhpTest\")->count()->run($conn);\r\n    echo \"Count: $result\\n\";\r\n\r\n    // List the someKey values of the documents in the table\r\n    // (using a mapping-function)\r\n    $result = r\\table(\"tablePhpTest\")->map(function($x) {\r\n            return $x('someKey');\r\n        })->run($conn);\r\n            \r\n    foreach ($result as $doc) {\r\n        echo \"Doc: $doc\\n\";\r\n    }\r\n       \r\n    // Delete the test table\r\n    r\\db(\"test\")->tableDrop(\"tablePhpTest\")->run($conn);\r\n?>\r\n```\r\n\r\nAttributions\r\n------------\r\n* PHP-RQL uses [pb4php](http://code.google.com/p/pb4php/) by Nikolai Kordulla.\r\n* A [patch](https://code.google.com/p/pb4php/issues/detail?id=16) for support of doubles in protocol buffers comes from Dmitry Vorobyev\r\n* The documentation system and most of the API documentation (except for PHP-specific parts) are from [RethinkDB](http://rethinkdb.com), as is the protocol buffer specification used.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}