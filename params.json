{"name":"PHP-RQL","tagline":"A PHP client driver for the RethinkDB query language (ReQL).","body":"PHP-RQL\r\n=======\r\n\r\nA PHP client driver for the RethinkDB query language (ReQL).\r\n\r\nPHP-RQL is licensed under the terms of the [Apache License 2.0](http://www.apache.org/licenses/LICENSE-2.0).\r\n\r\nUpdates\r\n-------\r\n\r\n* 04/26/2013 Today I pushed two bug fixes. The first fixes a problem in the network layer, that might have resulted in stalled and/or failing queries. The second fixes a problem that was triggered when receiving responses that contain empty strings. Please update your PHP-RQL installation.\r\n\r\nOverview\r\n--------\r\n\r\nPHP-RQL provides a driver to access [RethinkDB](http://rethinkdb.com) databases from PHP code.\r\n\r\nIt currently implements the query language and wire protocol of RethinkDB 1.4.x\r\n\r\nThe API of the driver is generally close to that of the official RethinkDB JavaScript driver.\r\n\r\nPreliminary documentation is available at: http://dmewes.com/~daniel/php-rql-api/#ph\r\n(except for the PHP examples, the documentation is a copy of the official RethinkDB API docs)\r\n\r\nRequirements\r\n------------\r\n\r\nPHP 5.3\r\n\r\nInstalling\r\n----------\r\n\r\n* Download the ZIP file of this repository or clone it using git.\r\n* Unpack it.\r\n* Copy the contents of the src directory (folders protocolbuf and rdb) into the path of your PHP project, or your system's PHP path (e.g. /usr/lib/php).\r\n\r\nExample\r\n-------\r\n\r\n```php\r\n<?php\r\n    // Load the driver\r\n    require_once(\"rdb/rdb.php\");\r\n\r\n    // Connect to localhost\r\n    $conn = r\\connect('localhost');\r\n\r\n    // Create a test table\r\n    r\\db(\"test\")->tableCreate(\"tablePhpTest\")->run($conn);\r\n\r\n    // Insert a document\r\n    $document = array('someKey' => 'someValue');\r\n    $result = r\\db(\"test\")->table(\"tablePhpTest\")->insert($document)\r\n        ->run($conn);\r\n    echo \"Insert: $result\\n\";\r\n\r\n    // How many documents are in the table?\r\n    $result = r\\db(\"test\")->table(\"tablePhpTest\")->count()->run($conn);\r\n    echo \"Count: $result\\n\";\r\n\r\n    // List the someKey values of the documents in the table\r\n    // (using a mapping-function)\r\n    $result = r\\db(\"test\")->table(\"tablePhpTest\")->map(function($x) {\r\n            return $x('someKey');\r\n        })->run($conn);\r\n            \r\n    foreach ($result as $doc) {\r\n        echo \"Doc: $doc\\n\";\r\n    }\r\n       \r\n    // Delete the test table\r\n    r\\db(\"test\")->tableDrop(\"tablePhpTest\")->run($conn);\r\n?>\r\n```\r\n\r\nAttributions\r\n------------\r\n* PHP-RQL uses [pb4php](http://code.google.com/p/pb4php/) by Nikolai Kordulla.\r\n* A [patch](https://code.google.com/p/pb4php/issues/detail?id=16) for support of doubles in protocol buffers comes from Dmitry Vorobyev\r\n* The documentation system and most of the API documentation (except for PHP-specific parts) are from [RethinkDB](http://rethinkdb.com), as is the protocol buffer specification used.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}