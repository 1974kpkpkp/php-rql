{"name":"PHP-RQL","tagline":"A PHP client driver for the RethinkDB query language (ReQL).","body":"PHP-RQL\r\n=======\r\n\r\nPHP-RQL provides a driver to access [RethinkDB](http://rethinkdb.com) databases from PHP code.\r\nIt is licensed under the terms of the [Apache License 2.0](http://www.apache.org/licenses/LICENSE-2.0).\r\n\r\nAPI documentation for PHP-RQL is available at: http://dmewes.com/~daniel/php-rql-api/#ph\r\n\r\nUpdates\r\n-------\r\n\r\n* 05/16/2013 New release: PHP-RQL 1.5.0. This version features compatibility with RethinkDB 1.5 and improved performance (~30% faster). If you are running RethinkDB 1.4, you can still update to the new version of PHP-RQL as long as you do not use the between() operation and none of the new features introduced in 1.5. For a list of new features in RethinkDB 1.5, read the [release notes](https://github.com/rethinkdb/rethinkdb/blob/v1.5.x/NOTES).\r\n* 05/07/2013 [PHP-RQL](https://packagist.org/packages/danielmewes/php-rql) is now available via [Composer](http://getcomposer.org)\r\n* 04/26/2013 Today I pushed two bug fixes. The first fixes a problem in the network layer, that might have resulted in stalled and/or failing queries. The second fixes a problem that was triggered when receiving responses that contain empty strings. Please update your PHP-RQL installation.\r\n\r\nRequirements\r\n------------\r\n\r\n* PHP 5.3\r\n* RethinkDB 1.4 or 1.5\r\n\r\nInstalling\r\n----------\r\n* Use [Composer](http://getcomposer.org):\r\n  ```require: \"danielmewes/php-rql\": \"dev-master\"```\r\n* Install manually:\r\n  1. Download the ZIP file of this repository or clone it using git.\r\n  2. Unpack it.\r\n  3. Copy the contents of the src directory (folders protocolbuf and rdb) into the path of your PHP project, or your system's PHP path (e.g. /usr/share/php).\r\n\r\nExample\r\n-------\r\n\r\n```php\r\n<?php\r\n    // Load the driver\r\n    require_once(\"rdb/rdb.php\");\r\n\r\n    // Connect to localhost\r\n    $conn = r\\connect('localhost');\r\n\r\n    // Create a test table\r\n    r\\db(\"test\")->tableCreate(\"tablePhpTest\")->run($conn);\r\n\r\n    // Insert a document\r\n    $document = array('someKey' => 'someValue');\r\n    $result = r\\table(\"tablePhpTest\")->insert($document)\r\n        ->run($conn);\r\n    echo \"Insert: $result\\n\";\r\n\r\n    // How many documents are in the table?\r\n    $result = r\\table(\"tablePhpTest\")->count()->run($conn);\r\n    echo \"Count: $result\\n\";\r\n\r\n    // List the someKey values of the documents in the table\r\n    // (using a mapping-function)\r\n    $result = r\\table(\"tablePhpTest\")->map(function($x) {\r\n            return $x('someKey');\r\n        })->run($conn);\r\n            \r\n    foreach ($result as $doc) {\r\n        echo \"Doc: $doc\\n\";\r\n    }\r\n       \r\n    // Delete the test table\r\n    r\\db(\"test\")->tableDrop(\"tablePhpTest\")->run($conn);\r\n?>\r\n```\r\n\r\nAttributions\r\n------------\r\n* PHP-RQL uses [pb4php](http://code.google.com/p/pb4php/) by Nikolai Kordulla.\r\n* A [patch](https://code.google.com/p/pb4php/issues/detail?id=16) for support of doubles in protocol buffers comes from Dmitry Vorobyev\r\n* The documentation system and most of the API documentation (except for PHP-specific parts) are from [RethinkDB](http://rethinkdb.com), as is the protocol buffer specification used.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}